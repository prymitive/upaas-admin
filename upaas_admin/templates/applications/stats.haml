- extends 'applications/base.html'


- load i18n
- load tz
- load compressed


- block app_content

  - if graphite_settings.render_url

    .btn-toolbar
      .btn-group
        %button.btn.btn-default.dropdown-toggle{'type':'button', 'data-toggle':'dropdown'}
          %span#upaas-metrics-type-label
            - trans "Requests"
          %span.caret
        %ul.dropdown-menu.pull-left{'role':'menu'}
          %li
            %a{'id':'metric-requests', 'href':'#'}
              - trans "Requests"
          %li
            %a{'id':'metric-avg_rt', 'href':'#'}
              - trans "Response time"
          %li
            %a{'id':'metric-workers', 'href':'#'}
              - trans "Workers count"
          %li
            %a{'id':'metric-rss', 'href':'#'}
              - trans "Memory usage"
          %li
            %a{'id':'metric-tx', 'href':'#'}
              - trans "Bytes sent"
      %button#upaas-stats-dates.btn.btn-default{'type':'button'}
        %span#upaas-stats-dates-label
          - trans "Select time range"
        %span.caret
      .btn-group.pull-right
        %button#upaas-stats-refresh.btn.btn-primary{'type':'button'}
          %i#upaas-stats-refresh-icon.fa.fa-refresh
          - trans "Refresh"
        %button#upaas-stats-refresh-options.btn.btn-primary.dropdown-toggle{'type':'button', 'data-toggle':'dropdown'}
          %span.caret
        %ul.dropdown-menu.upaas-dropdown-menu-form{'role':'menu'}
          %li
            %label.checkbox
              %input#upaas-stats-autorefresh{'type':'checkbox', 'checked':'checked'}
                - trans "Auto refresh"

    %p

    #graph-placeholder
      %img#graph
  - else
    %h3.text-center.text-muted
      - trans "Graphite statistics disabled"


- block js_bottom
  = block.super

  - compressed_js 'graphite'

  - compressed_css 'daterangepicker'
  - compressed_js 'daterangepicker'

  :javascript
    var default_start = moment().subtract('hours', 2);
    var default_end = moment();

    var metric = 'metric-requests';
    var start = default_start;
    var end = default_end;

    var autorefresh_delay = 30000;
    var autorefresh_timer = null;

    var graph_options = {
      'metric-workers': {
        target: [
            "alias(sumSeries({{ graphite_settings.root }}.*.{{ app.id }}.core.busy_workers), '{% trans "busy" %}')",
            "alias(sumSeries({{ graphite_settings.root }}.*.{{ app.id }}.core.idle_workers), '{% trans "idle" %}')",
        ],
        title: "{% trans "Workers count" %}",
        areaMode: "stacked",
        hideLegend: false,
        lineMode: "staircase",
        vtitle: "{% trans "count" %}",
        yMin: 0
      },
      'metric-avg_rt': {
        target: [
            "scale({{ graphite_settings.root }}.*.{{ app.id }}.core.avg_response_time, 0.001)",
        ],
        title: "{% trans "Response time" %}",
        hideLegend: true,
        vtitle: "{% trans "milliseconds" %}"
      },
      'metric-requests': {
        target: [
            "scaleToSeconds(nonNegativeDerivative({{ graphite_settings.root }}.*.{{ app.id }}.worker.0.requests), 1)"
        ],
        title: "{% trans "Requests" %}",
        areaMode: "stacked",
        hideLegend: true,
        vtitle: "{% trans "number per second" %}"
      },
      'metric-rss': {
        target: [
            "{{ graphite_settings.root }}.*.{{ app.id }}.core.total_rss",
        ],
        title: "{% trans "Memory usage" %}",
        areaMode: "stacked",
        hideLegend: true,
        lineMode: "staircase",
        vtitle: "{% trans "bytes" %}",
        yUnitSystem: "binary",
        yMin: 0
      },
      'metric-tx': {
        target: [
            "scaleToSeconds(nonNegativeDerivative({{ graphite_settings.root }}.*.{{ app.id }}.core.total_tx), 1)",
        ],
        title: "{% trans "Bytes sent" %}",
        areaMode: "stacked",
        hideLegend: true,
        vtitle: "{% trans "bytes per second" %}",
        yUnitSystem: "binary"
      }
    }

    function render() {
      var diff = Math.round(moment() - end) / 1000;
      if (diff < 300) {
        end = moment();
        start.add('seconds', diff);
      }
      var options = graph_options[metric];
      $.extend(options, {
        width: $('#graph-placeholder').width(),
        url: "{{ graphite_settings.render_url }}",
        tz: "{{ TIME_ZONE }}",
        from: moment(start).format("HH:mm_YYYYMMDD"),
        until: moment(end).format("HH:mm_YYYYMMDD"),
        bgcolor: window.UPAAS.rgb_to_hex($('#graph-placeholder').css('background-color'))
      });
      $("#graph").graphite(options);
      $('#upaas-stats-refresh-icon').addClass('fa-spin');
    }

    $(document).ready(function(){
      var separator = ' - ';
      var date_format = 'YYYY/MM/DD H:mm';

      $('#upaas-stats-dates').daterangepicker({
        applyClass: 'btn-primary',
        showDropdowns: true,
        opens: 'right',
        separator: separator,

        startDate: default_start,
        endDate: default_end,
        minDate: '{{ app.date_created|date:"c" }}',
        maxDate: moment().add('hours', 1),

        timePicker: true,
        timePickerIncrement: 10,
        timePicker12Hour: false,
        format: date_format,

        ranges: {
           '{% trans "Last 2 hours" %}': [default_start, default_end],
           '{% trans "Last 12 hours" %}': [moment().subtract('hours', 12), moment()],
           '{% trans "Today" %}': [moment().startOf('day'), moment()],
           '{% trans "Yesterday" %}': [moment().subtract('days', 1).startOf('day'), moment().subtract('days', 1).endOf('day')],
           '{% trans "Last 7 Days" %}': [moment().subtract('days', 6), moment()],
         },

        locale: {
            applyLabel: '{% trans "Apply" %}',
            cancelLabel: '{% trans "Cancel" %}',
            fromLabel: '{% trans "From" %}',
            toLabel: '{% trans "To" %}',
            customRangeLabel: '{% trans "Custom Range" %}',
        }

      }, function(date_from, date_until) {
        start = date_from;
        end = date_until;
        $('#upaas-stats-dates-label').html(start.format(date_format) + separator + end.format(date_format));
        render();
      });

      $(".dropdown-menu li a").click(function(){
        metric = $(this).attr('id');
        $('#upaas-metrics-type-label').html($(this).text());
        render();
      });

      autorefresh_timer = window.setInterval(render, autorefresh_delay);
      $('#upaas-stats-autorefresh').click(function(){
        if ($(this).is(':checked')) {
          if (autorefresh_timer == null) {
            autorefresh_timer = window.setInterval(render, autorefresh_delay);
          }
        } else {
          if (autorefresh_timer != null) {
            window.clearTimeout(autorefresh_timer);
            autorefresh_timer = null;
          }
        }
      });

      $('#upaas-stats-refresh').click(render);

      $('#graph').load(function() {
        $('#upaas-stats-refresh-icon')
          .removeClass('fa-spin fa-exclamation-circle')
          .addClass('fa-refresh');
        $('#upaas-stats-refresh, #upaas-stats-refresh-options')
          .addClass('btn-primary')
          .removeClass('btn-danger');
      });
      $('#graph').error(function() {
        $('#upaas-stats-refresh-icon')
          .removeClass('fa-spin fa-refresh')
          .addClass('fa-exclamation-circle');
        $('#upaas-stats-refresh, #upaas-stats-refresh-options')
          .removeClass('btn-primary')
          .addClass('btn-danger');
      });

      render();

    });
